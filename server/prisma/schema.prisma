generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
}

model avaliacao {
  id_avaliacao   Int    @id @default(autoincrement())
  nota_avaliacao Int?
  id_venda       Int?
  venda          venda? @relation(fields: [id_venda], references: [id_venda], onDelete: NoAction, onUpdate: NoAction)
}

model funcionario {
  id_funcionario    Int     @id @default(autoincrement())
  nome_funcionario  String? @db.Char
  login_funcionario String? @db.Char
  senha_funcionario String? @db.Char
}

model Item_estoque {
  id_itemestoque Int         @id @default(autoincrement())
  id_bebida      Int?
  created_at     DateTime?   @default(now()) @db.Timestamp(6)
  Bebida         Bebida?     @relation(fields: [id_bebida], references: [id_bebida], onDelete: NoAction, onUpdate: NoAction)
  Reposicao      Reposicao[]
}

model item_totem {
  id_bebida    Int?
  id_totem     Int?
  id_itemtotem Int     @id @default(autoincrement())
  Bebida       Bebida? @relation(fields: [id_bebida], references: [id_bebida], onDelete: NoAction, onUpdate: NoAction)
  Totem        Totem?  @relation(fields: [id_totem], references: [id_totem], onDelete: NoAction, onUpdate: NoAction)
}

model pagamento {
  id_pagamento Int     @id @default(autoincrement())
  id_venda     Int?
  status_venda String? @db.VarChar
  venda        venda?  @relation(fields: [id_venda], references: [id_venda], onDelete: NoAction, onUpdate: NoAction)
}

model Reposicao {
  id_reposicao         Int           @id @default(autoincrement())
  status_reposicao     String?       @db.VarChar
  observacao_reposicao String?       @db.VarChar
  id_itemestoque       Int?
  id_totem             Int?
  data_reposicao       DateTime?     @db.Date
  item_estoque         Item_estoque? @relation(fields: [id_itemestoque], references: [id_itemestoque], onDelete: NoAction, onUpdate: NoAction)
  totem                Totem?        @relation(fields: [id_totem], references: [id_totem], onUpdate: NoAction)
}

model Totem {
  id_totem                          Int          @id @default(autoincrement())
  id_maquina                        Int?
  nome_totem                        String?      @db.Char(20)
  Maquina                           Maquina[]
  reposicao                         Reposicao[]
  Maquina_Totem_id_maquinaToMaquina Maquina?     @relation("Totem_id_maquinaToMaquina", fields: [id_maquina], references: [id_maquina], onDelete: NoAction, onUpdate: NoAction)
  item_totem                        item_totem[]
  venda                             venda[]
}

model venda {
  id_venda    Int         @id @default(autoincrement())
  valor_venda Float?
  id_totem    Int?
  data_venda  DateTime?   @default(now()) @db.Timestamp(6)
  id_bebida   Int?
  avaliacao   avaliacao[]
  pagamento   pagamento[]
  Bebida      Bebida?     @relation(fields: [id_bebida], references: [id_bebida], onDelete: NoAction, onUpdate: NoAction)
  Totem       Totem?      @relation(fields: [id_totem], references: [id_totem], onDelete: NoAction, onUpdate: NoAction)
}

model Bebida {
  id_bebida     Int            @id @default(autoincrement())
  nome_bebida   String?
  tipo_bebida   String?
  valor_bebida  Float?
  imagem_bebida Bytes?
  item_estoque  Item_estoque[]
  item_totem    item_totem[]
  venda         venda[]
}

model Maquina {
  id_maquina                      Int       @id(map: "maquina_pkey") @default(autoincrement())
  status_maquina                  String?
  local_maquina                   String?
  id_totem                        Int?
  created_at                      DateTime? @default(now()) @db.Timestamp(6)
  totem                           Totem?    @relation(fields: [id_totem], references: [id_totem], onUpdate: NoAction)
  Totem_Totem_id_maquinaToMaquina Totem[]   @relation("Totem_id_maquinaToMaquina")
}
